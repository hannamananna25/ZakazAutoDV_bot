import os
import logging
import re
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import (
    ReplyKeyboardRemove,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardMarkup,
    KeyboardButton
)
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
API_TOKEN = os.getenv('BOT_TOKEN')
# –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞—à—É –ø—É–±–ª–∏—á–Ω—É—é –≥—Ä—É–ø–ø—É
GROUP_USERNAME = "@Zayvka_na_auto"  # username –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã
CHANNEL_LINK = "https://t.me/auto_zakaz_dv"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
class InterviewStates(StatesGroup):
    MODEL = State()
    SPECS = State()
    BUDGET = State()
    TIMEFRAME = State()
    NAME = State()
    PHONE = State()

# –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
def format_phone(phone: str) -> str:
    digits = re.sub(r'\D', '', phone)
    if digits.startswith('8') and len(digits) == 11:
        return '+7' + digits[1:]
    elif digits.startswith('7') and len(digits) == 11:
        return '+' + digits
    elif digits.startswith('9') and len(digits) == 10:
        return '+7' + digits
    return phone

def is_valid_phone(phone: str) -> bool:
    digits = re.sub(r'\D', '', phone)
    return len(digits) in (10, 11) and digits.isdigit()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message(Command("start"))
async def start_cmd(message: types.Message, state: FSMContext):
    await state.clear()
    await state.set_state(InterviewStates.MODEL)
    await message.answer("–ö–∞–∫–∏–µ –º–∞—Ä–∫–∏/–º–æ–¥–µ–ª–∏ –∞–≤—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç? –£–∫–∞–∂–∏—Ç–µ 1-3 –≤–∞—Ä–∏–∞–Ω—Ç–∞.")

@dp.message(InterviewStates.MODEL)
async def process_model(message: types.Message, state: FSMContext):
    await state.update_data(model=message.text)
    await state.set_state(InterviewStates.SPECS)
    await message.answer("–ñ–µ–ª–∞–µ–º—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∞–≤—Ç–æ: –≥–æ–¥, –æ–±—ä—ë–º –¥–≤–∏–≥–∞—Ç–µ–ª—è, –ø—Ä–∏–≤–æ–¥, –ø—Ä–æ–±–µ–≥, —Ü–≤–µ—Ç, –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è –∏.—Ç.–¥.")

@dp.message(InterviewStates.SPECS)
async def process_specs(message: types.Message, state: FSMContext):
    await state.update_data(specs=message.text)
    await state.set_state(InterviewStates.BUDGET)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–æ 1 –º–ª–Ω —Ä—É–±", callback_data="budget_1")],
        [InlineKeyboardButton(text="1-1.5 –º–ª–Ω —Ä—É–±", callback_data="budget_1.5")],
        [InlineKeyboardButton(text="1.5-2 –º–ª–Ω —Ä—É–±", callback_data="budget_2")],
        [InlineKeyboardButton(text="2-3 –º–ª–Ω —Ä—É–±", callback_data="budget_3")],
        [InlineKeyboardButton(text="3-5 –º–ª–Ω —Ä—É–±", callback_data="budget_5")],
        [InlineKeyboardButton(text="5+ –º–ª–Ω —Ä—É–±", callback_data="budget_5plus")],
    ])
    
    await message.answer("–ö–∞–∫–æ–π –±—é–¥–∂–µ—Ç –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –Ω–∞ –ø–æ–∫—É–ø–∫—É –∞–≤—Ç–æ —Å —É—á–µ—Ç–æ–º —Ç–∞–º–æ–∂–µ–Ω–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–æ –†–§?", reply_markup=keyboard)

@dp.callback_query(F.data.startswith("budget_"))
async def process_budget(callback: types.CallbackQuery, state: FSMContext):
    budget_map = {
        "budget_1": "–î–æ 1 –º–ª–Ω —Ä—É–±",
        "budget_1.5": "1-1.5 –º–ª–Ω —Ä—É–±",
        "budget_2": "1.5-2 –º–ª–Ω —Ä—É–±",
        "budget_3": "2-3 –º–ª–Ω —Ä—É–±",
        "budget_5": "3-5 –º–ª–Ω —Ä—É–±",
        "budget_5plus": "5+ –º–ª–Ω —Ä—É–±"
    }
    
    await state.update_data(budget=budget_map[callback.data])
    await callback.message.edit_reply_markup(reply_markup=None)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°—Ä–æ—á–Ω–æ (–≥–æ—Ç–æ–≤ –∫—É–ø–∏—Ç—å —Å–µ–π—á–∞—Å)", callback_data="time_now")],
        [InlineKeyboardButton(text="–í –±–ª–∏–∂–∞–π—à—É—é –Ω–µ–¥–µ–ª—é", callback_data="time_week")],
        [InlineKeyboardButton(text="–í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ", callback_data="time_month")],
        [InlineKeyboardButton(text="–ß–µ—Ä–µ–∑ 1-3 –º–µ—Å—è—Ü–∞", callback_data="time_1-3")],
        [InlineKeyboardButton(text="–ü–æ–∫–∞ —Å–º–æ—Ç—Ä—é –≤–∞—Ä–∏–∞–Ω—Ç—ã", callback_data="time_looking")],
    ])
    
    await callback.message.answer("–ö–∞–∫ —Å—Ä–æ—á–Ω–æ –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø–æ–∫—É–ø–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è?", reply_markup=keyboard)
    await state.set_state(InterviewStates.TIMEFRAME)

@dp.callback_query(F.data.startswith("time_"))
async def process_timeframe(callback: types.CallbackQuery, state: FSMContext):
    timeframe_map = {
        "time_now": "–°—Ä–æ—á–Ω–æ (–≥–æ—Ç–æ–≤ –∫—É–ø–∏—Ç—å —Å–µ–π—á–∞—Å)",
        "time_week": "–í –±–ª–∏–∂–∞–π—à—É—é –Ω–µ–¥–µ–ª—é",
        "time_month": "–í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ",
        "time_1-3": "–ß–µ—Ä–µ–∑ 1-3 –º–µ—Å—è—Ü–∞",
        "time_looking": "–ü–æ–∫–∞ —Å–º–æ—Ç—Ä—é –≤–∞—Ä–∏–∞–Ω—Ç—ã"
    }
    
    await state.update_data(timeframe=timeframe_map[callback.data])
    await callback.message.edit_reply_markup(reply_markup=None)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –ø–æ —Å—Ä–æ–∫—É –ø–æ–∫—É–ø–∫–∏
    timeframe = callback.data
    if timeframe in ["time_now", "time_week", "time_month"]:
        # –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –∫–ª–∏–µ–Ω—Ç - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
        await state.set_state(InterviewStates.NAME)
        await callback.message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    else:
        # –ù–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –∫–ª–∏–µ–Ω—Ç - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª
        user_data = await state.get_data()
        await state.clear()
        
        await callback.message.answer(
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã! –ü–æ–∫–∞ –≤—ã —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã, "
            f"–ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞–º –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª: {CHANNEL_LINK}\n\n"
            "–¢–∞–º –º—ã —Ä–µ–≥—É–ª—è—Ä–Ω–æ –ø—É–±–ª–∏–∫—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –∞–≤—Ç–æ –∏–∑ –ö–∏—Ç–∞—è. "
            "–ö–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã –∫ –ø–æ–∫—É–ø–∫–µ - –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å!",
            reply_markup=ReplyKeyboardRemove()
        )

@dp.message(InterviewStates.NAME)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(InterviewStates.PHONE)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä –¥–ª—è —Å–≤—è–∑–∏")

@dp.message(InterviewStates.PHONE)
async def process_phone(message: types.Message, state: FSMContext):
    if not is_valid_phone(message.text):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
        return
    
    formatted_phone = format_phone(message.text)
    user_data = await state.get_data()
    await state.clear()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    manager_message = (
        "üö® –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê\n\n"
        f"üë§ –ò–º—è: {user_data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {formatted_phone}\n"
        f"üöò –ú–æ–¥–µ–ª–∏: {user_data.get('model', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üìã –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: {user_data.get('specs', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üí∞ –ë—é–¥–∂–µ—Ç: {user_data.get('budget', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"‚è± –°—Ä–æ—á–Ω–æ—Å—Ç—å: {user_data.get('timeframe', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
        f"#–∑–∞—è–≤–∫–∞"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –≥—Ä—É–ø–ø—É
    try:
        await bot.send_message(chat_id=GROUP_USERNAME, text=manager_message)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
        logger.info(f"–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –≥—Ä—É–ø–ø—É {GROUP_USERNAME}")
        
        await message.answer(
            "–°–ø–∞—Å–∏–±–æ, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–≤–µ–¥–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∫–∞–ª—å–∫—É–ª—è—Ü–∏—é "
            "–ø–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏—Ö –≤–∞—Å –∞–≤—Ç–æ –∏ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è",
            reply_markup=ReplyKeyboardRemove()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏: {e}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ –ª–æ–≥–∞—Ö –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤
        logger.info(f"–ù–ï–û–¢–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ó–ê–Ø–í–ö–ê: {manager_message}")
        
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏
        await message.answer(
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞—è–≤–∫—É! –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è "
            f"—á–µ—Ä–µ–∑ {GROUP_USERNAME} –∏–ª–∏ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",
            reply_markup=ReplyKeyboardRemove()
        )

@dp.message(Command("cancel"))
async def cancel_cmd(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–î–∏–∞–ª–æ–≥ –ø—Ä–µ—Ä–≤–∞–Ω. –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start",
        reply_markup=ReplyKeyboardRemove()
    )

if __name__ == "__main__":
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    dp.run_polling(bot)